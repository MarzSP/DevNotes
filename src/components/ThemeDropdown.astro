---
export interface Props {
    themes: string[];
    id?: string;
    label?: string;
    initial?: string;
    navigateTo?: string;
}
const { themes, id = 'theme-dd', label = 'Theme', initial = 'All', navigateTo } = Astro.props;
const options = ['All', ...new Set(themes)];
---
<style>
    .themebar { display: flex; justify-content: flex-end; margin: 0 0 1rem; }
    .dd { position: relative; width: 260px; }
    .dd-trigger {
        width: 100%;
        padding: .6rem .9rem;
        border: 1px solid #e5e7eb;
        border-radius: 10px;
        background: #fff;
        display: flex; align-items: center; justify-content: space-between;
        font-weight: 600; cursor: pointer;
        box-shadow: 0 1px 2px rgb(0 0 0 / .04);
    }
    .dd-trigger:focus { outline: 2px solid #93c5fd; outline-offset: 2px; }
    .dd-menu {
        position: absolute; left: 0; right: 0; margin-top: .4rem; z-index: 20;
        max-height: 320px; overflow: auto; padding: .4rem;
        background: #fff; border: 1px solid #e5e7eb; border-radius: 12px;
        box-shadow: 0 10px 25px rgb(0 0 0 / .08); display: none;
    }
    .dd.open .dd-menu { display: block; }
    .dd-item {
        display: flex; align-items: center; justify-content: space-between;
        padding: .55rem .7rem; border-radius: 8px; cursor: pointer;
    }
    .dd-item:hover, .dd-item:focus { background: #f3f4f6; outline: none; }
    .dd-item.selected { background: #eef2ff; color: #4338ca; }
    .dd-check { font-size: .9rem; }
    @media (max-width: 720px){ .themebar{justify-content:center}.dd{width:100%} }
</style>

<div class="themebar">
    <div class="dd" id={id} aria-expanded="false">
        <button type="button" class="dd-trigger" id={`${id}-btn`} aria-haspopup="listbox">
            <span id={`${id}-label`}>{initial}</span>
            <svg width="18" height="18" viewBox="0 0 20 20" aria-hidden="true">
                <path d="M5.5 7.5l4.5 4.5 4.5-4.5" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            </svg>
        </button>

        <ul class="dd-menu" id={`${id}-menu`} role="listbox" tabindex="-1" aria-label={label}>
            {options.map((t, i) => (
                    <li
                            class={`dd-item ${t === initial ? 'selected' : ''}`}
                            role="option"
                            aria-selected={t === initial ? 'true' : 'false'}
                            tabindex="0"
                            data-value={t}
                            id={`${id}-opt-${i}`}
                    >
                        <span>{t}</span>
                        <span class="dd-check" style={`display:${t === initial ? 'inline' : 'none'}`}>âœ“</span>
                    </li>
            ))}
        </ul>
    </div>
</div>


<script define:vars={{ id }}>
    (() => {
        /** @type {HTMLDivElement|null} */ const dd = document.getElementById(id);
        if (!dd) return;
        /** @type {HTMLButtonElement|null} */ const btn = document.getElementById(id + '-btn');
        /** @type {HTMLUListElement|null} */ const menu = document.getElementById(id + '-menu');

        function openMenu(){ dd.classList.add('open'); dd.setAttribute('aria-expanded','true'); }
        function closeMenu(){ dd.classList.remove('open'); dd.setAttribute('aria-expanded','false'); }

        btn?.addEventListener('click', () => dd.classList.contains('open') ? closeMenu() : openMenu());
        document.addEventListener('click', (e) => { if (!dd.contains(/** @type {Node} */(e.target))) closeMenu(); });
        btn?.addEventListener('keydown', (e) => { if (e.key === 'ArrowDown'){ e.preventDefault(); openMenu(); }});
    })();
</script>